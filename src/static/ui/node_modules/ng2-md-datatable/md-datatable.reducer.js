var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import 'rxjs/add/operator/distinctUntilChanged';
import 'rxjs/add/operator/filter';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/pluck';
import { DatatableSortType, } from './md-datatable.interfaces';
import { MdDatatableActions } from './md-datatable.actions';
function initialState(selectableValues) {
    if (selectableValues === void 0) { selectableValues = []; }
    return {
        allRowsSelected: false,
        selectableValues: selectableValues,
        selectedValues: [],
        sortType: DatatableSortType.None,
    };
}
;
var DatatableReducer = (function () {
    function DatatableReducer() {
    }
    DatatableReducer.prototype.reduce = function (datatablesState, action) {
        var datatableId = action.datatableId;
        var targetedState = datatablesState && datatablesState[datatableId] || initialState();
        var allRowsSelected = targetedState.allRowsSelected, selectableValues = targetedState.selectableValues, selectedValues = targetedState.selectedValues, sortBy = targetedState.sortBy, sortType = targetedState.sortType;
        switch (action.type) {
            case MdDatatableActions.UPDATE_SELECTABLE_VALUES:
                return Object.assign({}, datatablesState, (_a = {},
                    _a[datatableId] = {
                        allRowsSelected: action.payload.length > 0 ? allRowsSelected : false,
                        selectableValues: action.payload,
                        selectedValues: action.payload.length > 0 && allRowsSelected ? action.payload : [],
                        sortBy: sortBy,
                        sortType: sortType,
                    },
                    _a));
            case MdDatatableActions.TOGGLE_SELECT_ALL:
                return Object.assign({}, datatablesState, (_b = {},
                    _b[datatableId] = {
                        allRowsSelected: action.payload,
                        selectableValues: selectableValues,
                        selectedValues: action.payload ? selectableValues.slice(0).sort() : [],
                        sortBy: sortBy,
                        sortType: sortType,
                    },
                    _b));
            case MdDatatableActions.TOGGLE_SELECT_ONE: {
                var _c = action.payload, selectableValue_1 = _c.selectableValue, checked = _c.checked;
                return Object.assign({}, datatablesState, (_d = {},
                    _d[datatableId] = {
                        allRowsSelected: checked && selectedValues.length === selectableValues.length - 1,
                        selectableValues: selectableValues,
                        selectedValues: checked ?
                            selectedValues.concat([selectableValue_1]).sort() :
                            selectedValues.filter(function (v) { return v !== selectableValue_1; }),
                        sortBy: sortBy,
                        sortType: sortType,
                    },
                    _d));
            }
            case MdDatatableActions.TOGGLE_SORT_COLUMN: {
                if (action.payload !== sortBy) {
                    return Object.assign({}, datatablesState, (_e = {},
                        _e[datatableId] = {
                            allRowsSelected: false,
                            selectableValues: selectableValues,
                            selectedValues: [],
                            sortBy: action.payload,
                            sortType: DatatableSortType.Ascending,
                        },
                        _e));
                }
                var newSortType = void 0;
                switch (sortType) {
                    case DatatableSortType.None:
                        newSortType = DatatableSortType.Ascending;
                        break;
                    case DatatableSortType.Ascending:
                        newSortType = DatatableSortType.Descending;
                        break;
                    case DatatableSortType.Descending:
                        newSortType = DatatableSortType.None;
                        break;
                }
                return Object.assign({}, datatablesState, (_f = {},
                    _f[datatableId] = {
                        allRowsSelected: false,
                        selectableValues: selectableValues,
                        selectedValues: [],
                        sortBy: sortBy,
                        sortType: newSortType,
                    },
                    _f));
            }
            default:
                return datatablesState;
        }
        var _a, _b, _d, _e, _f;
    };
    return DatatableReducer;
}());
DatatableReducer = __decorate([
    Injectable()
], DatatableReducer);
export { DatatableReducer };
export function getDatatableState(datatableId) {
    return function (state$) { return state$
        .map(function (datatablesState) { return datatablesState[datatableId]; })
        .filter(function (datatableState) { return !!datatableState; }); };
}
export function areAllRowsSelected(datatableId) {
    return function (state$) { return getDatatableState(datatableId)(state$)
        .pluck('allRowsSelected')
        .distinctUntilChanged(); };
}
export function isRowSelected(datatableId, selectableValue) {
    return function (state$) { return getDatatableState(datatableId)(state$)
        .map(function (datatableState) {
        return datatableState.allRowsSelected || datatableState.selectedValues.includes(selectableValue);
    })
        .distinctUntilChanged(); };
}
export function getCurrentSelection(datatableId) {
    return function (state$) { return getDatatableState(datatableId)(state$)
        .map(function (datatableState) { return ({
        allRowsSelected: datatableState.allRowsSelected,
        selectedValues: datatableState.selectedValues,
    }); })
        .distinctUntilChanged(function (e1, e2) {
        return e1.allRowsSelected === e2.allRowsSelected && e1.selectedValues.length === e2.selectedValues.length;
    }); };
}
export function getCurrentSort(datatableId) {
    return function (state$) { return getDatatableState(datatableId)(state$)
        .map(function (state) { return ({
        sortBy: state.sortBy,
        sortType: state.sortType,
    }); })
        .filter(function (currentSort) { return !!currentSort.sortBy; })
        .distinctUntilChanged(function (e1, e2) {
        return e1.sortBy === e2.sortBy && e1.sortType === e2.sortType;
    }); };
}

//# sourceMappingURL=md-datatable.reducer.js.map
