{"version":3,"sources":["../../src/lib/md-datatable.component.ts"],"names":[],"mappings":"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","file":"md-datatable.component.js","sourcesContent":["import {\n  Component,\n  AfterContentInit,\n  Input,\n  Output,\n  EventEmitter,\n  ContentChild,\n  ContentChildren,\n  QueryList,\n  forwardRef,\n} from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/from';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport 'rxjs/add/operator/let';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/skip';\nimport 'rxjs/add/operator/takeUntil';\n\nimport { IDatatableSelectionEvent, IDatatableSortEvent } from './md-datatable.interfaces';\n\nimport { BaseComponent } from './helpers';\nimport { MdDataTableHeaderComponent } from './md-datatable-header.component';\nimport { MdDataTableRowComponent } from './md-datatable-row.component';\nimport { MdDatatableStore } from './md-datatable.store';\nimport { MdDatatableActions } from './md-datatable.actions';\n\nimport { getCurrentSelection, getCurrentSort } from './md-datatable.reducer';\n\nlet instanceId = 0;\n\n@Component({\n  selector: 'ng2-md-datatable',\n  template: `\n    <table>\n      <ng-content></ng-content>\n    </table>\n  `,\n  styleUrls: ['md-datatable.component.scss']\n})\nexport class MdDataTableComponent extends BaseComponent implements AfterContentInit {\n  isSelectable = false;\n\n  @Input()\n  set selectable(val: any) {\n    if (typeof (val) === 'boolean') {\n      this.isSelectable = val;\n    } else if (typeof (val) === 'string' && val.length > 0) {\n      try {\n        this.isSelectable = JSON.parse(val);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  }\n\n  @Output() selectionChange: EventEmitter<IDatatableSelectionEvent> =\n  new EventEmitter<IDatatableSelectionEvent>(false);\n  @Output() sortChange: EventEmitter<IDatatableSortEvent> =\n  new EventEmitter<IDatatableSortEvent>(false);\n\n  @ContentChild(forwardRef(() => MdDataTableHeaderComponent)) headerCmp: MdDataTableHeaderComponent;\n  @ContentChildren(MdDataTableRowComponent) rowsCmp: QueryList<MdDataTableRowComponent>;\n\n  id = `md-datatable-${instanceId++}`;\n\n  constructor(\n    private store: MdDatatableStore,\n    private actions: MdDatatableActions,\n  ) {\n    super();\n  }\n\n  ngAfterContentInit() {\n    if (this.isSelectable && this.headerCmp && this.rowsCmp) {\n      // when datatable is selectable, update state with selectable values from content\n      this.store.dispatch(\n        this.actions.updateSelectableValues(this.id,\n          this.rowsCmp.toArray().map((row: MdDataTableRowComponent) => row.selectableValue))\n      );\n\n      // subscribe to selection changes and emit IDatatableSelectionEvent\n      this.store\n        .let(getCurrentSelection(this.id))\n        .skip(1)\n        .takeUntil(this.unmount$)\n        .subscribe(this.selectionChange);\n\n      // update state with selectable values upon changes\n      Observable.from(this.rowsCmp.changes)\n        .map((query: QueryList<MdDataTableRowComponent>) => query\n          .toArray()\n          .map((row: MdDataTableRowComponent) => row.selectableValue))\n        .distinctUntilChanged((values1: string[], values2: string[]) =>\n          values1.length === values2.length && JSON.stringify(values1) === JSON.stringify(values2))\n        .takeUntil(this.unmount$)\n        .subscribe((selectableValues: string[]) => this.store.dispatch(\n          this.actions.updateSelectableValues(this.id, selectableValues)));\n    }\n\n    // subscribe to sort changes and emit IDatatableSortEvent\n    this.store\n      .let(getCurrentSort(this.id))\n      .takeUntil(this.unmount$)\n      .subscribe(this.sortChange);\n  }\n}\n"]}