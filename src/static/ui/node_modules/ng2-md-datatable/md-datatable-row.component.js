var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Component, Input, HostBinding, HostListener, ViewChild, Inject, Optional, forwardRef, } from '@angular/core';
import { MdCheckbox } from '@angular/material';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import 'rxjs/add/operator/let';
import 'rxjs/add/operator/takeUntil';
import { BaseComponent } from './helpers';
import { MdDataTableComponent } from './md-datatable.component';
import { MdDatatableStore } from './md-datatable.store';
import { isRowSelected } from './md-datatable.reducer';
import { MdDatatableActions } from './md-datatable.actions';
var MdDataTableRowComponent = (function (_super) {
    __extends(MdDataTableRowComponent, _super);
    function MdDataTableRowComponent(table, store, actions) {
        var _this = _super.call(this) || this;
        _this.table = table;
        _this.store = store;
        _this.actions = actions;
        _this.checked$ = new BehaviorSubject(false);
        return _this;
    }
    Object.defineProperty(MdDataTableRowComponent.prototype, "selectable", {
        get: function () {
            return !!this.selectableValue && this.table && this.table.isSelectable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdDataTableRowComponent.prototype, "isChecked", {
        get: function () {
            return this.checked$.getValue();
        },
        enumerable: true,
        configurable: true
    });
    MdDataTableRowComponent.prototype.onRowClick = function (event) {
        if (!this.selectable) {
            return;
        }
        if (this.selectable && this.checkboxCmp && (event.target)['nodeName'] !== 'A') {
            event.preventDefault();
            this.store.dispatch(this.actions.toggleSelectOne(this.datatableId, this.selectableValue, !this.isChecked));
        }
    };
    MdDataTableRowComponent.prototype.ngAfterContentInit = function () {
        this.datatableId = this.table.id;
        this.store
            .let(isRowSelected(this.datatableId, this.selectableValue))
            .takeUntil(this.unmount$)
            .subscribe(this.checked$);
    };
    MdDataTableRowComponent.prototype.onCheckboxChange = function (event) {
        this.store.dispatch(this.actions.toggleSelectOne(this.datatableId, this.selectableValue, event.checked));
    };
    return MdDataTableRowComponent;
}(BaseComponent));
__decorate([
    Input(),
    __metadata("design:type", String)
], MdDataTableRowComponent.prototype, "selectableValue", void 0);
__decorate([
    ViewChild(MdCheckbox),
    __metadata("design:type", MdCheckbox)
], MdDataTableRowComponent.prototype, "checkboxCmp", void 0);
__decorate([
    HostBinding('class.selectable'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], MdDataTableRowComponent.prototype, "selectable", null);
__decorate([
    HostBinding('class.checked'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], MdDataTableRowComponent.prototype, "isChecked", null);
__decorate([
    HostListener('click', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [MouseEvent]),
    __metadata("design:returntype", void 0)
], MdDataTableRowComponent.prototype, "onRowClick", null);
MdDataTableRowComponent = __decorate([
    Component({
        selector: 'ng2-md-datatable-row',
        template: "\n    <td *ngIf=\"selectable\" class=\"md-data-check-cell\">\n      <md-checkbox [checked]=\"checked$ | async\" (change)=\"onCheckboxChange($event)\"></md-checkbox>\n    </td>\n    <ng-content></ng-content>\n  ",
        styles: [":host { display: table-row; box-sizing: border-box; text-align: left; } :host.selectable { cursor: pointer; } .md-data-check-cell { text-align: center; } /*# sourceMappingURL=md-datatable-row.component.css.map */ "],
    }),
    __param(0, Optional()), __param(0, Inject(forwardRef(function () { return MdDataTableComponent; }))),
    __metadata("design:paramtypes", [MdDataTableComponent,
        MdDatatableStore,
        MdDatatableActions])
], MdDataTableRowComponent);
export { MdDataTableRowComponent };

//# sourceMappingURL=md-datatable-row.component.js.map
