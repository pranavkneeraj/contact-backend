{"version":3,"sources":["../../src/lib/md-datatable.reducer.ts"],"names":[],"mappings":"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","file":"md-datatable.reducer.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/pluck';\n\nimport {\n  IDatatablesState,\n  IDatatableState,\n  IDatatableAction,\n  IDatatableReducer,\n  DatatableSortType,\n  IDatatableSelectionEvent,\n  IDatatableSortEvent,\n} from './md-datatable.interfaces';\n\nimport { MdDatatableActions } from './md-datatable.actions';\n\nfunction initialState(selectableValues: string[] = []): IDatatableState {\n  return {\n    allRowsSelected: false,\n    selectableValues,\n    selectedValues: [],\n    sortType: DatatableSortType.None,\n  };\n};\n\n@Injectable()\nexport class DatatableReducer implements IDatatableReducer {\n  reduce(datatablesState: IDatatablesState, action: IDatatableAction): IDatatablesState {\n    const { datatableId } = action;\n    const targetedState: IDatatableState = datatablesState && datatablesState[datatableId] || initialState();\n\n    const {\n      allRowsSelected,\n      selectableValues,\n      selectedValues,\n      sortBy,\n      sortType,\n    } = targetedState;\n\n    switch (action.type) {\n      case MdDatatableActions.UPDATE_SELECTABLE_VALUES:\n        return Object.assign({}, datatablesState, {\n          [datatableId]: {\n            allRowsSelected: action.payload.length > 0 ? allRowsSelected : false,\n            selectableValues: action.payload,\n            selectedValues: action.payload.length > 0 && allRowsSelected ? action.payload : [],\n            sortBy,\n            sortType,\n          },\n        });\n\n      case MdDatatableActions.TOGGLE_SELECT_ALL:\n        return Object.assign({}, datatablesState, {\n          [datatableId]: {\n            allRowsSelected: action.payload,\n            selectableValues,\n            selectedValues: action.payload ? selectableValues.slice(0).sort() : [],\n            sortBy,\n            sortType,\n          },\n        });\n\n      case MdDatatableActions.TOGGLE_SELECT_ONE: {\n        const { selectableValue, checked } = action.payload;\n\n        return Object.assign({}, datatablesState, {\n          [datatableId]: {\n            allRowsSelected: checked && selectedValues.length === selectableValues.length - 1,\n            selectableValues,\n            selectedValues: checked ?\n              [...selectedValues, selectableValue].sort() :\n              selectedValues.filter(v => v !== selectableValue),\n            sortBy,\n            sortType,\n          }\n        });\n      }\n\n      case MdDatatableActions.TOGGLE_SORT_COLUMN: {\n        if (action.payload !== sortBy) {\n          return Object.assign({}, datatablesState, {\n            [datatableId]: {\n              allRowsSelected: false,\n              selectableValues,\n              selectedValues: [],\n              sortBy: action.payload,\n              sortType: DatatableSortType.Ascending,\n            }\n          });\n        }\n\n        let newSortType;\n        switch (sortType) {\n          case DatatableSortType.None:\n            newSortType = DatatableSortType.Ascending;\n            break;\n          case DatatableSortType.Ascending:\n            newSortType = DatatableSortType.Descending;\n            break;\n          case DatatableSortType.Descending:\n            newSortType = DatatableSortType.None;\n            break;\n        }\n\n        return Object.assign({}, datatablesState, {\n          [datatableId]: {\n            allRowsSelected: false,\n            selectableValues,\n            selectedValues: [],\n            sortBy,\n            sortType: newSortType,\n          }\n        });\n      }\n\n      default:\n        return datatablesState;\n    }\n  }\n}\n\n/** @internal */\nexport function getDatatableState(datatableId: string): (state$: Observable<IDatatablesState>) => Observable<IDatatableState> {\n  return (state$: Observable<IDatatablesState>) => state$\n    .map((datatablesState: IDatatablesState) => datatablesState[datatableId])\n    .filter((datatableState: IDatatableState) => !!datatableState);\n}\n\n/** @internal */\nexport function areAllRowsSelected(datatableId: string): (state$: Observable<IDatatablesState>) => Observable<boolean> {\n  return (state$: Observable<IDatatablesState>) => getDatatableState(datatableId)(state$)\n    .pluck('allRowsSelected')\n    .distinctUntilChanged();\n}\n\n/** @internal */\nexport function isRowSelected(datatableId: string, selectableValue: string): (state$: Observable<IDatatablesState>) => Observable<boolean> {\n  return (state$: Observable<IDatatablesState>) => getDatatableState(datatableId)(state$)\n    .map((datatableState: IDatatableState) =>\n      datatableState.allRowsSelected || datatableState.selectedValues.includes(selectableValue))\n    .distinctUntilChanged();\n}\n\n/** @internal */\nexport function getCurrentSelection(datatableId: string): (state$: Observable<IDatatablesState>) => Observable<IDatatableSelectionEvent> {\n  return (state$: Observable<IDatatablesState>) => getDatatableState(datatableId)(state$)\n    .map((datatableState: IDatatableState) => ({\n      allRowsSelected: datatableState.allRowsSelected,\n      selectedValues: datatableState.selectedValues,\n    }))\n    .distinctUntilChanged((e1: IDatatableSelectionEvent, e2: IDatatableSelectionEvent) =>\n      e1.allRowsSelected === e2.allRowsSelected && e1.selectedValues.length === e2.selectedValues.length);\n}\n\n/** @internal */\nexport function getCurrentSort(datatableId: string): (state$: Observable<IDatatablesState>) => Observable<IDatatableSortEvent> {\n  return (state$: Observable<IDatatablesState>) => getDatatableState(datatableId)(state$)\n    .map((state: IDatatableState) => (<IDatatableSortEvent>{\n      sortBy: state.sortBy,\n      sortType: state.sortType,\n    }))\n    .filter((currentSort: IDatatableSortEvent) => !!currentSort.sortBy)\n    .distinctUntilChanged((e1: IDatatableSortEvent, e2: IDatatableSortEvent) =>\n      e1!.sortBy === e2!.sortBy && e1!.sortType === e2!.sortType\n    );\n}\n"]}