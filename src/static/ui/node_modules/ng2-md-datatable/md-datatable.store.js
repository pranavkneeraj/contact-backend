var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { queue } from 'rxjs/scheduler/queue';
import 'rxjs/add/operator/observeOn';
import 'rxjs/add/operator/withLatestFrom';
import { DatatableReducer } from './md-datatable.reducer';
export var STORE_INITIAL_STATE = new InjectionToken('ng2-md-datatable-test-initial-state');
export var REDUX_DEVTOOLS_EXTENSION = new InjectionToken('redux-devtools');
export function reduxDevToolsExtensionFactory() {
    var REDUX_DEVTOOLS_KEY = '__REDUX_DEVTOOLS_EXTENSION__';
    return typeof (window) === 'object' &&
        typeof (window[REDUX_DEVTOOLS_KEY]) === 'function' ?
        window[REDUX_DEVTOOLS_KEY] : null;
}
var MdDatatableDispatcher = MdDatatableDispatcher_1 = (function (_super) {
    __extends(MdDatatableDispatcher, _super);
    function MdDatatableDispatcher() {
        return _super.call(this, { datatableId: '', type: MdDatatableDispatcher_1.INIT }) || this;
    }
    MdDatatableDispatcher.prototype.dispatch = function (action) {
        this.next(action);
    };
    return MdDatatableDispatcher;
}(BehaviorSubject));
MdDatatableDispatcher.INIT = 'ng2-md-datatable/store/init';
MdDatatableDispatcher = MdDatatableDispatcher_1 = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [])
], MdDatatableDispatcher);
export { MdDatatableDispatcher };
var MdDatatableStore = (function (_super) {
    __extends(MdDatatableStore, _super);
    function MdDatatableStore(dispatcher$, initialState, reducer, reduxDevToolsExtension) {
        var _this = _super.call(this) || this;
        _this.dispatcher$ = dispatcher$;
        _this.instanceId = "ng2-md-datatable-store-" + Date.now();
        _this.state$ = new BehaviorSubject(initialState);
        _this.source = _this.state$;
        var reduxDevToolsConnection;
        if (reduxDevToolsExtension) {
            reduxDevToolsConnection = reduxDevToolsExtension.connect({
                name: _this.instanceId,
                features: {
                    pause: false,
                    lock: false,
                    persist: false,
                    export: true,
                    import: false,
                    jump: false,
                    skip: false,
                    reorder: false,
                    dispatch: false,
                    test: false,
                },
            });
        }
        _this.dispatcher$
            .withLatestFrom(_this.source)
            .observeOn(queue)
            .subscribe(function (_a) {
            var action = _a[0], state = _a[1];
            var newState = reducer.reduce(state, action);
            _this.state$.next(newState);
            if (reduxDevToolsConnection) {
                reduxDevToolsConnection.send(action, newState, undefined, _this.instanceId);
            }
        });
        return _this;
    }
    MdDatatableStore.prototype.dispatch = function (action) {
        this.dispatcher$.dispatch(action);
    };
    return MdDatatableStore;
}(Observable));
MdDatatableStore = __decorate([
    Injectable(),
    __param(1, Inject(STORE_INITIAL_STATE)),
    __param(3, Inject(REDUX_DEVTOOLS_EXTENSION)), __param(3, Optional()),
    __metadata("design:paramtypes", [MdDatatableDispatcher, Object, DatatableReducer, Object])
], MdDatatableStore);
export { MdDatatableStore };
var MdDatatableDispatcher_1;

//# sourceMappingURL=md-datatable.store.js.map
