(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/Subject'), require('rxjs/Observable'), require('rxjs/add/observable/from'), require('rxjs/add/operator/distinctUntilChanged'), require('rxjs/add/operator/let'), require('rxjs/add/operator/map'), require('rxjs/add/operator/skip'), require('rxjs/add/operator/takeUntil'), require('rxjs/BehaviorSubject'), require('rxjs/scheduler/queue'), require('rxjs/add/operator/observeOn'), require('rxjs/add/operator/withLatestFrom'), require('rxjs/add/operator/filter'), require('rxjs/add/operator/pluck'), require('@angular/material'), require('@angular/common'), require('@angular/forms')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/Subject', 'rxjs/Observable', 'rxjs/add/observable/from', 'rxjs/add/operator/distinctUntilChanged', 'rxjs/add/operator/let', 'rxjs/add/operator/map', 'rxjs/add/operator/skip', 'rxjs/add/operator/takeUntil', 'rxjs/BehaviorSubject', 'rxjs/scheduler/queue', 'rxjs/add/operator/observeOn', 'rxjs/add/operator/withLatestFrom', 'rxjs/add/operator/filter', 'rxjs/add/operator/pluck', '@angular/material', '@angular/common', '@angular/forms'], factory) :
	(factory((global['ng2-md-datatable'] = global['ng2-md-datatable'] || {}),global.ng.core,global.Rx,global.Rx,global.Rx.Observable,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx,global.Rx,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.ng.material,global.ng.common,global.ng.forms));
}(this, (function (exports,_angular_core,rxjs_Subject,rxjs_Observable,rxjs_add_observable_from,rxjs_add_operator_distinctUntilChanged,rxjs_add_operator_let,rxjs_add_operator_map,rxjs_add_operator_skip,rxjs_add_operator_takeUntil,rxjs_BehaviorSubject,rxjs_scheduler_queue,rxjs_add_operator_observeOn,rxjs_add_operator_withLatestFrom,rxjs_add_operator_filter,rxjs_add_operator_pluck,_angular_material,_angular_common,_angular_forms) { 'use strict';

(function (DatatableSortType) {
    DatatableSortType[DatatableSortType["None"] = 0] = "None";
    DatatableSortType[DatatableSortType["Ascending"] = 1] = "Ascending";
    DatatableSortType[DatatableSortType["Descending"] = 2] = "Descending";
})(exports.DatatableSortType || (exports.DatatableSortType = {}));

var BaseComponent = (function () {
    function BaseComponent() {
        this.unmountEmitter$ = new rxjs_Subject.Subject();
        this.unmount$ = this.unmountEmitter$;
    }
    BaseComponent.prototype.ngOnDestroy = function () {
        this.unmountEmitter$.next();
        this.unmountEmitter$.complete();
    };
    return BaseComponent;
}());

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
exports.MdDataTablePaginationComponent = (function (_super) {
    __extends(MdDataTablePaginationComponent, _super);
    function MdDataTablePaginationComponent(changeDetectorRef) {
        var _this = _super.call(this) || this;
        _this.changeDetectorRef = changeDetectorRef;
        _this.itemsPerPageChoices = [5, 10, 20, 50];
        _this.itemsPerPageFirstChoice = 10;
        _this.needShowFirstArrow = true;
        _this.needShowLastArrow = true;
        _this.ofText = 'of';
        _this.rowsPerPageText = 'Rows per page:';
        _this.paginationChange = new _angular_core.EventEmitter(true);
        return _this;
    }
    Object.defineProperty(MdDataTablePaginationComponent.prototype, "firstIndexOfPage", {
        get: function () {
            return this.currentPage * this.itemsPerPage - this.itemsPerPage + 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdDataTablePaginationComponent.prototype, "lastIndexOfPage", {
        get: function () {
            var maxLastIndexOnPage = this.currentPage * this.itemsPerPage;
            return maxLastIndexOnPage >= this.itemsCount ? this.itemsCount : maxLastIndexOnPage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdDataTablePaginationComponent.prototype, "isPreviousOrFirstButtonDisabled", {
        get: function () {
            return this.currentPage === 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdDataTablePaginationComponent.prototype, "isNextOrLastButtonDisabled", {
        get: function () {
            return this.lastIndexOfPage >= this.itemsCount;
        },
        enumerable: true,
        configurable: true
    });
    MdDataTablePaginationComponent.prototype.ngOnInit = function () {
        if (!this.currentPage) {
            this.currentPage = 1;
        }
        if (!this.itemsPerPage) {
            this.itemsPerPage = this.itemsPerPageFirstChoice;
        }
        if (!this.itemsCount) {
            this.itemsCount = 0;
        }
    };
    MdDataTablePaginationComponent.prototype.onSelectChange = function (event) {
        this.currentPage = 1;
        this.itemsPerPage = Number(event.value);
        this.changeDetectorRef.markForCheck();
        this.emitPaginationChange();
    };
    MdDataTablePaginationComponent.prototype.onClickFirst = function () {
        this.currentPage = 1;
        this.changeDetectorRef.markForCheck();
        this.emitPaginationChange();
    };
    MdDataTablePaginationComponent.prototype.onClickLast = function () {
        this.currentPage = Math.ceil(this.itemsCount / this.itemsPerPage);
        this.changeDetectorRef.markForCheck();
        this.emitPaginationChange();
    };
    MdDataTablePaginationComponent.prototype.onClickPrevious = function () {
        this.currentPage = this.currentPage - 1;
        this.changeDetectorRef.markForCheck();
        this.emitPaginationChange();
    };
    MdDataTablePaginationComponent.prototype.onClickNext = function () {
        this.currentPage = this.currentPage + 1;
        this.changeDetectorRef.markForCheck();
        this.emitPaginationChange();
    };
    MdDataTablePaginationComponent.prototype.emitPaginationChange = function () {
        this.paginationChange.emit({
            page: this.currentPage,
            itemsPerPage: this.itemsPerPage,
        });
    };
    return MdDataTablePaginationComponent;
}(BaseComponent));
__decorate([
    _angular_core.Input(),
    __metadata("design:type", Number)
], exports.MdDataTablePaginationComponent.prototype, "currentPage", void 0);
__decorate([
    _angular_core.Input(),
    __metadata("design:type", Number)
], exports.MdDataTablePaginationComponent.prototype, "itemsPerPage", void 0);
__decorate([
    _angular_core.Input(),
    __metadata("design:type", Number)
], exports.MdDataTablePaginationComponent.prototype, "itemsCount", void 0);
__decorate([
    _angular_core.Input(),
    __metadata("design:type", Array)
], exports.MdDataTablePaginationComponent.prototype, "itemsPerPageChoices", void 0);
__decorate([
    _angular_core.Input(),
    __metadata("design:type", Object)
], exports.MdDataTablePaginationComponent.prototype, "itemsPerPageFirstChoice", void 0);
__decorate([
    _angular_core.Input(),
    __metadata("design:type", Object)
], exports.MdDataTablePaginationComponent.prototype, "needShowFirstArrow", void 0);
__decorate([
    _angular_core.Input(),
    __metadata("design:type", Object)
], exports.MdDataTablePaginationComponent.prototype, "needShowLastArrow", void 0);
__decorate([
    _angular_core.Input(),
    __metadata("design:type", Object)
], exports.MdDataTablePaginationComponent.prototype, "ofText", void 0);
__decorate([
    _angular_core.Input(),
    __metadata("design:type", Object)
], exports.MdDataTablePaginationComponent.prototype, "rowsPerPageText", void 0);
__decorate([
    _angular_core.Output(),
    __metadata("design:type", _angular_core.EventEmitter)
], exports.MdDataTablePaginationComponent.prototype, "paginationChange", void 0);
exports.MdDataTablePaginationComponent = __decorate([
    _angular_core.Component({
        selector: 'ng2-md-datatable-pagination',
        template: "\n    <span>{{rowsPerPageText}}</span>\n    <md-select [ngModel]=\"itemsPerPage\" (change)=\"onSelectChange($event)\" class=\"pagination__itemsPerPage\">\n      <md-option *ngFor=\"let choice of itemsPerPageChoices\"\n        [value]=\"choice\">{{ choice }}</md-option>\n    </md-select>\n    <span class=\"pagination__range\">{{firstIndexOfPage}}\u2013{{lastIndexOfPage}} {{ofText}} {{itemsCount}}</span>\n    <div class=\"pagination__controls\">\n      <button *ngIf=\"needShowFirstArrow\" md-icon-button\n        [disabled]=\"isPreviousOrFirstButtonDisabled\"\n        (click)=\"onClickFirst()\"\n        aria-label=\"First\">\n        <md-icon>first_page</md-icon>\n      </button>\n      <button md-icon-button\n        [disabled]=\"isPreviousOrFirstButtonDisabled\"\n        (click)=\"onClickPrevious()\"\n        aria-label=\"Previous\">\n        <md-icon>navigate_before</md-icon>\n      </button>\n      <button md-icon-button\n        [disabled]=\"isNextOrLastButtonDisabled\"\n        (click)=\"onClickNext()\"\n        aria-label=\"Next\">\n        <md-icon>navigate_next</md-icon>\n      </button>\n      <button *ngIf=\"needShowLastArrow\" md-icon-button\n        [disabled]=\"isNextOrLastButtonDisabled\"\n        (click)=\"onClickLast()\"\n        aria-label=\"Last\">\n        <md-icon>last_page</md-icon>\n      </button>\n    </div>\n  ",
        styles: [":host { display: -moz-flex; display: flex; flex-flow: row wrap; -moz-justify-content: flex-end; justify-content: flex-end; -moz-align-items: center; align-items: center; align-self: stretch; color: #5c5c5c; font-weight: 400; font-size: 0.8rem; } .pagination__controls { display: inline-block; padding: 0; } /*# sourceMappingURL=md-datatable-pagination.component.css.map */ "],
        changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,
    }),
    __metadata("design:paramtypes", [_angular_core.ChangeDetectorRef])
], exports.MdDataTablePaginationComponent);

var __decorate$5 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var MdDatatableActions = MdDatatableActions_1 = (function () {
    function MdDatatableActions() {
    }
    MdDatatableActions.prototype.updateSelectableValues = function (datatableId, selectableValues) {
        return {
            datatableId: datatableId,
            type: MdDatatableActions_1.UPDATE_SELECTABLE_VALUES,
            payload: selectableValues,
        };
    };
    MdDatatableActions.prototype.toggleSelectAll = function (datatableId, checked) {
        return {
            datatableId: datatableId,
            type: MdDatatableActions_1.TOGGLE_SELECT_ALL,
            payload: checked,
        };
    };
    MdDatatableActions.prototype.toggleSelectOne = function (datatableId, selectableValue, checked) {
        return {
            datatableId: datatableId,
            type: MdDatatableActions_1.TOGGLE_SELECT_ONE,
            payload: {
                selectableValue: selectableValue,
                checked: checked,
            },
        };
    };
    MdDatatableActions.prototype.toggleSortColumn = function (datatableId, sortBy) {
        return {
            datatableId: datatableId,
            type: MdDatatableActions_1.TOGGLE_SORT_COLUMN,
            payload: sortBy,
        };
    };
    return MdDatatableActions;
}());
MdDatatableActions.UPDATE_SELECTABLE_VALUES = '[Datatable] Update Selectable Values';
MdDatatableActions.TOGGLE_SELECT_ALL = '[Datatable] Toggle Select All';
MdDatatableActions.TOGGLE_SELECT_ONE = '[Datatable] Toggle Select One';
MdDatatableActions.TOGGLE_SORT_COLUMN = '[Datatable] Toggle Sort Column';
MdDatatableActions = MdDatatableActions_1 = __decorate$5([
    _angular_core.Injectable()
], MdDatatableActions);
var MdDatatableActions_1;

var __decorate$4 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
function initialState(selectableValues) {
    if (selectableValues === void 0) { selectableValues = []; }
    return {
        allRowsSelected: false,
        selectableValues: selectableValues,
        selectedValues: [],
        sortType: exports.DatatableSortType.None,
    };
}

var DatatableReducer = (function () {
    function DatatableReducer() {
    }
    DatatableReducer.prototype.reduce = function (datatablesState, action) {
        var datatableId = action.datatableId;
        var targetedState = datatablesState && datatablesState[datatableId] || initialState();
        var allRowsSelected = targetedState.allRowsSelected, selectableValues = targetedState.selectableValues, selectedValues = targetedState.selectedValues, sortBy = targetedState.sortBy, sortType = targetedState.sortType;
        switch (action.type) {
            case MdDatatableActions.UPDATE_SELECTABLE_VALUES:
                return Object.assign({}, datatablesState, (_a = {},
                    _a[datatableId] = {
                        allRowsSelected: action.payload.length > 0 ? allRowsSelected : false,
                        selectableValues: action.payload,
                        selectedValues: action.payload.length > 0 && allRowsSelected ? action.payload : [],
                        sortBy: sortBy,
                        sortType: sortType,
                    },
                    _a));
            case MdDatatableActions.TOGGLE_SELECT_ALL:
                return Object.assign({}, datatablesState, (_b = {},
                    _b[datatableId] = {
                        allRowsSelected: action.payload,
                        selectableValues: selectableValues,
                        selectedValues: action.payload ? selectableValues.slice(0).sort() : [],
                        sortBy: sortBy,
                        sortType: sortType,
                    },
                    _b));
            case MdDatatableActions.TOGGLE_SELECT_ONE: {
                var _c = action.payload, selectableValue_1 = _c.selectableValue, checked = _c.checked;
                return Object.assign({}, datatablesState, (_d = {},
                    _d[datatableId] = {
                        allRowsSelected: checked && selectedValues.length === selectableValues.length - 1,
                        selectableValues: selectableValues,
                        selectedValues: checked ?
                            selectedValues.concat([selectableValue_1]).sort() :
                            selectedValues.filter(function (v) { return v !== selectableValue_1; }),
                        sortBy: sortBy,
                        sortType: sortType,
                    },
                    _d));
            }
            case MdDatatableActions.TOGGLE_SORT_COLUMN: {
                if (action.payload !== sortBy) {
                    return Object.assign({}, datatablesState, (_e = {},
                        _e[datatableId] = {
                            allRowsSelected: false,
                            selectableValues: selectableValues,
                            selectedValues: [],
                            sortBy: action.payload,
                            sortType: exports.DatatableSortType.Ascending,
                        },
                        _e));
                }
                var newSortType = void 0;
                switch (sortType) {
                    case exports.DatatableSortType.None:
                        newSortType = exports.DatatableSortType.Ascending;
                        break;
                    case exports.DatatableSortType.Ascending:
                        newSortType = exports.DatatableSortType.Descending;
                        break;
                    case exports.DatatableSortType.Descending:
                        newSortType = exports.DatatableSortType.None;
                        break;
                }
                return Object.assign({}, datatablesState, (_f = {},
                    _f[datatableId] = {
                        allRowsSelected: false,
                        selectableValues: selectableValues,
                        selectedValues: [],
                        sortBy: sortBy,
                        sortType: newSortType,
                    },
                    _f));
            }
            default:
                return datatablesState;
        }
        var _a, _b, _d, _e, _f;
    };
    return DatatableReducer;
}());
DatatableReducer = __decorate$4([
    _angular_core.Injectable()
], DatatableReducer);
function getDatatableState(datatableId) {
    return function (state$) { return state$
        .map(function (datatablesState) { return datatablesState[datatableId]; })
        .filter(function (datatableState) { return !!datatableState; }); };
}
function areAllRowsSelected(datatableId) {
    return function (state$) { return getDatatableState(datatableId)(state$)
        .pluck('allRowsSelected')
        .distinctUntilChanged(); };
}
function isRowSelected(datatableId, selectableValue) {
    return function (state$) { return getDatatableState(datatableId)(state$)
        .map(function (datatableState) {
        return datatableState.allRowsSelected || datatableState.selectedValues.includes(selectableValue);
    })
        .distinctUntilChanged(); };
}
function getCurrentSelection(datatableId) {
    return function (state$) { return getDatatableState(datatableId)(state$)
        .map(function (datatableState) { return ({
        allRowsSelected: datatableState.allRowsSelected,
        selectedValues: datatableState.selectedValues,
    }); })
        .distinctUntilChanged(function (e1, e2) {
        return e1.allRowsSelected === e2.allRowsSelected && e1.selectedValues.length === e2.selectedValues.length;
    }); };
}
function getCurrentSort(datatableId) {
    return function (state$) { return getDatatableState(datatableId)(state$)
        .map(function (state) { return ({
        sortBy: state.sortBy,
        sortType: state.sortType,
    }); })
        .filter(function (currentSort) { return !!currentSort.sortBy; })
        .distinctUntilChanged(function (e1, e2) {
        return e1.sortBy === e2.sortBy && e1.sortType === e2.sortType;
    }); };
}

var __extends$3 = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate$3 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$3 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$1 = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var STORE_INITIAL_STATE = new _angular_core.InjectionToken('ng2-md-datatable-test-initial-state');
var REDUX_DEVTOOLS_EXTENSION = new _angular_core.InjectionToken('redux-devtools');
function reduxDevToolsExtensionFactory() {
    var REDUX_DEVTOOLS_KEY = '__REDUX_DEVTOOLS_EXTENSION__';
    return typeof (window) === 'object' &&
        typeof (window[REDUX_DEVTOOLS_KEY]) === 'function' ?
        window[REDUX_DEVTOOLS_KEY] : null;
}
var MdDatatableDispatcher = MdDatatableDispatcher_1 = (function (_super) {
    __extends$3(MdDatatableDispatcher, _super);
    function MdDatatableDispatcher() {
        return _super.call(this, { datatableId: '', type: MdDatatableDispatcher_1.INIT }) || this;
    }
    MdDatatableDispatcher.prototype.dispatch = function (action) {
        this.next(action);
    };
    return MdDatatableDispatcher;
}(rxjs_BehaviorSubject.BehaviorSubject));
MdDatatableDispatcher.INIT = 'ng2-md-datatable/store/init';
MdDatatableDispatcher = MdDatatableDispatcher_1 = __decorate$3([
    _angular_core.Injectable(),
    __metadata$3("design:paramtypes", [])
], MdDatatableDispatcher);
var MdDatatableStore = (function (_super) {
    __extends$3(MdDatatableStore, _super);
    function MdDatatableStore(dispatcher$, initialState, reducer, reduxDevToolsExtension) {
        var _this = _super.call(this) || this;
        _this.dispatcher$ = dispatcher$;
        _this.instanceId = "ng2-md-datatable-store-" + Date.now();
        _this.state$ = new rxjs_BehaviorSubject.BehaviorSubject(initialState);
        _this.source = _this.state$;
        var reduxDevToolsConnection;
        if (reduxDevToolsExtension) {
            reduxDevToolsConnection = reduxDevToolsExtension.connect({
                name: _this.instanceId,
                features: {
                    pause: false,
                    lock: false,
                    persist: false,
                    export: true,
                    import: false,
                    jump: false,
                    skip: false,
                    reorder: false,
                    dispatch: false,
                    test: false,
                },
            });
        }
        _this.dispatcher$
            .withLatestFrom(_this.source)
            .observeOn(rxjs_scheduler_queue.queue)
            .subscribe(function (_a) {
            var action = _a[0], state = _a[1];
            var newState = reducer.reduce(state, action);
            _this.state$.next(newState);
            if (reduxDevToolsConnection) {
                reduxDevToolsConnection.send(action, newState, undefined, _this.instanceId);
            }
        });
        return _this;
    }
    MdDatatableStore.prototype.dispatch = function (action) {
        this.dispatcher$.dispatch(action);
    };
    return MdDatatableStore;
}(rxjs_Observable.Observable));
MdDatatableStore = __decorate$3([
    _angular_core.Injectable(),
    __param$1(1, _angular_core.Inject(STORE_INITIAL_STATE)),
    __param$1(3, _angular_core.Inject(REDUX_DEVTOOLS_EXTENSION)), __param$1(3, _angular_core.Optional()),
    __metadata$3("design:paramtypes", [MdDatatableDispatcher, Object, DatatableReducer, Object])
], MdDatatableStore);
var MdDatatableDispatcher_1;

var __extends$2 = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate$2 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$2 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
exports.MdDataTableHeaderComponent = (function (_super) {
    __extends$2(MdDataTableHeaderComponent, _super);
    function MdDataTableHeaderComponent(table, store, actions) {
        var _this = _super.call(this) || this;
        _this.table = table;
        _this.store = store;
        _this.actions = actions;
        _this.allChecked$ = new rxjs_BehaviorSubject.BehaviorSubject(false);
        return _this;
    }
    Object.defineProperty(MdDataTableHeaderComponent.prototype, "selectable", {
        get: function () {
            return this.table && this.table.isSelectable;
        },
        enumerable: true,
        configurable: true
    });
    MdDataTableHeaderComponent.prototype.ngAfterViewInit = function () {
        this.datatableId = this.table.id;
        this.store
            .let(areAllRowsSelected(this.datatableId))
            .takeUntil(this.unmount$)
            .subscribe(this.allChecked$);
    };
    MdDataTableHeaderComponent.prototype.onAllCheckedChange = function (e) {
        this.store.dispatch(this.actions.toggleSelectAll(this.datatableId, e.checked));
    };
    return MdDataTableHeaderComponent;
}(BaseComponent));
exports.MdDataTableHeaderComponent = __decorate$2([
    _angular_core.Component({
        selector: 'ng2-md-datatable-header',
        template: "\n    <tr>\n      <th *ngIf=\"selectable\" class=\"md-data-check-cell\">\n        <md-checkbox [checked]=\"allChecked$ | async\" (change)=\"onAllCheckedChange($event)\"></md-checkbox>\n      </th>\n      <ng-content></ng-content>\n    </tr>\n  ",
        styles: [":host { display: table-header-group; } tr { vertical-align: middle; } .md-data-check-cell { text-align: center; } /*# sourceMappingURL=md-datatable-header.component.css.map */ "]
    }),
    __param(0, _angular_core.Optional()), __param(0, _angular_core.Inject(_angular_core.forwardRef(function () { return exports.MdDataTableComponent; }))),
    __metadata$2("design:paramtypes", [exports.MdDataTableComponent,
        MdDatatableStore,
        MdDatatableActions])
], exports.MdDataTableHeaderComponent);

var __extends$4 = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate$6 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$4 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$2 = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
exports.MdDataTableRowComponent = (function (_super) {
    __extends$4(MdDataTableRowComponent, _super);
    function MdDataTableRowComponent(table, store, actions) {
        var _this = _super.call(this) || this;
        _this.table = table;
        _this.store = store;
        _this.actions = actions;
        _this.checked$ = new rxjs_BehaviorSubject.BehaviorSubject(false);
        return _this;
    }
    Object.defineProperty(MdDataTableRowComponent.prototype, "selectable", {
        get: function () {
            return !!this.selectableValue && this.table && this.table.isSelectable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdDataTableRowComponent.prototype, "isChecked", {
        get: function () {
            return this.checked$.getValue();
        },
        enumerable: true,
        configurable: true
    });
    MdDataTableRowComponent.prototype.onRowClick = function (event) {
        if (!this.selectable) {
            return;
        }
        if (this.selectable && this.checkboxCmp && (event.target)['nodeName'] !== 'A') {
            event.preventDefault();
            this.store.dispatch(this.actions.toggleSelectOne(this.datatableId, this.selectableValue, !this.isChecked));
        }
    };
    MdDataTableRowComponent.prototype.ngAfterContentInit = function () {
        this.datatableId = this.table.id;
        this.store
            .let(isRowSelected(this.datatableId, this.selectableValue))
            .takeUntil(this.unmount$)
            .subscribe(this.checked$);
    };
    MdDataTableRowComponent.prototype.onCheckboxChange = function (event) {
        this.store.dispatch(this.actions.toggleSelectOne(this.datatableId, this.selectableValue, event.checked));
    };
    return MdDataTableRowComponent;
}(BaseComponent));
__decorate$6([
    _angular_core.Input(),
    __metadata$4("design:type", String)
], exports.MdDataTableRowComponent.prototype, "selectableValue", void 0);
__decorate$6([
    _angular_core.ViewChild(_angular_material.MdCheckbox),
    __metadata$4("design:type", _angular_material.MdCheckbox)
], exports.MdDataTableRowComponent.prototype, "checkboxCmp", void 0);
__decorate$6([
    _angular_core.HostBinding('class.selectable'),
    __metadata$4("design:type", Boolean),
    __metadata$4("design:paramtypes", [])
], exports.MdDataTableRowComponent.prototype, "selectable", null);
__decorate$6([
    _angular_core.HostBinding('class.checked'),
    __metadata$4("design:type", Boolean),
    __metadata$4("design:paramtypes", [])
], exports.MdDataTableRowComponent.prototype, "isChecked", null);
__decorate$6([
    _angular_core.HostListener('click', ['$event']),
    __metadata$4("design:type", Function),
    __metadata$4("design:paramtypes", [MouseEvent]),
    __metadata$4("design:returntype", void 0)
], exports.MdDataTableRowComponent.prototype, "onRowClick", null);
exports.MdDataTableRowComponent = __decorate$6([
    _angular_core.Component({
        selector: 'ng2-md-datatable-row',
        template: "\n    <td *ngIf=\"selectable\" class=\"md-data-check-cell\">\n      <md-checkbox [checked]=\"checked$ | async\" (change)=\"onCheckboxChange($event)\"></md-checkbox>\n    </td>\n    <ng-content></ng-content>\n  ",
        styles: [":host { display: table-row; box-sizing: border-box; text-align: left; } :host.selectable { cursor: pointer; } .md-data-check-cell { text-align: center; } /*# sourceMappingURL=md-datatable-row.component.css.map */ "],
    }),
    __param$2(0, _angular_core.Optional()), __param$2(0, _angular_core.Inject(_angular_core.forwardRef(function () { return exports.MdDataTableComponent; }))),
    __metadata$4("design:paramtypes", [exports.MdDataTableComponent,
        MdDatatableStore,
        MdDatatableActions])
], exports.MdDataTableRowComponent);

var __extends$1 = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate$1 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$1 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var instanceId = 0;
exports.MdDataTableComponent = (function (_super) {
    __extends$1(MdDataTableComponent, _super);
    function MdDataTableComponent(store, actions) {
        var _this = _super.call(this) || this;
        _this.store = store;
        _this.actions = actions;
        _this.isSelectable = false;
        _this.selectionChange = new _angular_core.EventEmitter(false);
        _this.sortChange = new _angular_core.EventEmitter(false);
        _this.id = "md-datatable-" + instanceId++;
        return _this;
    }
    Object.defineProperty(MdDataTableComponent.prototype, "selectable", {
        set: function (val) {
            if (typeof (val) === 'boolean') {
                this.isSelectable = val;
            }
            else if (typeof (val) === 'string' && val.length > 0) {
                try {
                    this.isSelectable = JSON.parse(val);
                }
                catch (e) {
                    console.error(e);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    MdDataTableComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (this.isSelectable && this.headerCmp && this.rowsCmp) {
            this.store.dispatch(this.actions.updateSelectableValues(this.id, this.rowsCmp.toArray().map(function (row) { return row.selectableValue; })));
            this.store
                .let(getCurrentSelection(this.id))
                .skip(1)
                .takeUntil(this.unmount$)
                .subscribe(this.selectionChange);
            rxjs_Observable.Observable.from(this.rowsCmp.changes)
                .map(function (query) { return query
                .toArray()
                .map(function (row) { return row.selectableValue; }); })
                .distinctUntilChanged(function (values1, values2) {
                return values1.length === values2.length && JSON.stringify(values1) === JSON.stringify(values2);
            })
                .takeUntil(this.unmount$)
                .subscribe(function (selectableValues) { return _this.store.dispatch(_this.actions.updateSelectableValues(_this.id, selectableValues)); });
        }
        this.store
            .let(getCurrentSort(this.id))
            .takeUntil(this.unmount$)
            .subscribe(this.sortChange);
    };
    return MdDataTableComponent;
}(BaseComponent));
__decorate$1([
    _angular_core.Input(),
    __metadata$1("design:type", Object),
    __metadata$1("design:paramtypes", [Object])
], exports.MdDataTableComponent.prototype, "selectable", null);
__decorate$1([
    _angular_core.Output(),
    __metadata$1("design:type", _angular_core.EventEmitter)
], exports.MdDataTableComponent.prototype, "selectionChange", void 0);
__decorate$1([
    _angular_core.Output(),
    __metadata$1("design:type", _angular_core.EventEmitter)
], exports.MdDataTableComponent.prototype, "sortChange", void 0);
__decorate$1([
    _angular_core.ContentChild(_angular_core.forwardRef(function () { return exports.MdDataTableHeaderComponent; })),
    __metadata$1("design:type", exports.MdDataTableHeaderComponent)
], exports.MdDataTableComponent.prototype, "headerCmp", void 0);
__decorate$1([
    _angular_core.ContentChildren(exports.MdDataTableRowComponent),
    __metadata$1("design:type", _angular_core.QueryList)
], exports.MdDataTableComponent.prototype, "rowsCmp", void 0);
exports.MdDataTableComponent = __decorate$1([
    _angular_core.Component({
        selector: 'ng2-md-datatable',
        template: "\n    <table>\n      <ng-content></ng-content>\n    </table>\n  ",
        styles: [":host { display: block; overflow: auto; } table { width: 100%; border-spacing: 0; border-collapse: collapse; box-sizing: border-box; } /*# sourceMappingURL=md-datatable.component.css.map */ "]
    }),
    __metadata$1("design:paramtypes", [MdDatatableStore,
        MdDatatableActions])
], exports.MdDataTableComponent);

var __extends$5 = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate$7 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$5 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$3 = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
exports.MdDataTableColumnComponent = (function (_super) {
    __extends$5(MdDataTableColumnComponent, _super);
    function MdDataTableColumnComponent(table, store, actions) {
        var _this = _super.call(this) || this;
        _this.table = table;
        _this.store = store;
        _this.actions = actions;
        _this.isNumeric = false;
        _this.sort$ = new rxjs_BehaviorSubject.BehaviorSubject({ sortType: exports.DatatableSortType.None });
        return _this;
    }
    Object.defineProperty(MdDataTableColumnComponent.prototype, "numeric", {
        set: function (val) {
            this.isNumeric = val !== 'false';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdDataTableColumnComponent.prototype, "sortable", {
        get: function () {
            return !!this.sortableValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdDataTableColumnComponent.prototype, "hasNumericClass", {
        get: function () {
            return this.isNumeric;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdDataTableColumnComponent.prototype, "ascendingSort", {
        get: function () {
            if (!this.sortable) {
                return false;
            }
            var currentSort = this.sort$.getValue();
            return currentSort.sortBy === this.sortableValue &&
                currentSort.sortType === exports.DatatableSortType.Ascending;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdDataTableColumnComponent.prototype, "descendingSort", {
        get: function () {
            if (!this.sortable) {
                return false;
            }
            var currentSort = this.sort$.getValue();
            return currentSort.sortBy === this.sortableValue &&
                currentSort.sortType === exports.DatatableSortType.Descending;
        },
        enumerable: true,
        configurable: true
    });
    MdDataTableColumnComponent.prototype.ngAfterContentInit = function () {
        this.datatableId = this.table.id;
        if (this.datatableId) {
            this.store
                .let(getCurrentSort(this.datatableId))
                .takeUntil(this.unmount$)
                .subscribe(this.sort$);
        }
    };
    MdDataTableColumnComponent.prototype.onClick = function () {
        if (this.datatableId && this.sortable) {
            this.store.dispatch(this.actions.toggleSortColumn(this.datatableId, this.sortableValue));
        }
    };
    return MdDataTableColumnComponent;
}(BaseComponent));
__decorate$7([
    _angular_core.Input(),
    __metadata$5("design:type", String)
], exports.MdDataTableColumnComponent.prototype, "sortableValue", void 0);
__decorate$7([
    _angular_core.Input(),
    __metadata$5("design:type", Object),
    __metadata$5("design:paramtypes", [Object])
], exports.MdDataTableColumnComponent.prototype, "numeric", null);
__decorate$7([
    _angular_core.HostBinding('class.sortable'),
    __metadata$5("design:type", Boolean),
    __metadata$5("design:paramtypes", [])
], exports.MdDataTableColumnComponent.prototype, "sortable", null);
__decorate$7([
    _angular_core.HostBinding('class.numeric'),
    __metadata$5("design:type", Object),
    __metadata$5("design:paramtypes", [])
], exports.MdDataTableColumnComponent.prototype, "hasNumericClass", null);
__decorate$7([
    _angular_core.HostBinding('class.sorted-ascending'),
    __metadata$5("design:type", Object),
    __metadata$5("design:paramtypes", [])
], exports.MdDataTableColumnComponent.prototype, "ascendingSort", null);
__decorate$7([
    _angular_core.HostBinding('class.sorted-descending'),
    __metadata$5("design:type", Object),
    __metadata$5("design:paramtypes", [])
], exports.MdDataTableColumnComponent.prototype, "descendingSort", null);
__decorate$7([
    _angular_core.HostListener('click'),
    __metadata$5("design:type", Function),
    __metadata$5("design:paramtypes", []),
    __metadata$5("design:returntype", void 0)
], exports.MdDataTableColumnComponent.prototype, "onClick", null);
exports.MdDataTableColumnComponent = __decorate$7([
    _angular_core.Component({
        selector: 'ng2-md-datatable-column',
        template: '<span><ng-content></ng-content></span>',
        styles: ["@charset \"UTF-8\"; :host { display: table-cell; box-sizing: border-box; vertical-align: middle; text-align: left; text-overflow: ellipsis; -webkit-touch-callout: none; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; } :host.sortable:hover { cursor: pointer; } :host.sortable > span::before { visibility: hidden; position: relative; left: -5px; font-family: 'Material Icons'; vertical-align: sub; content: ''; } :host.sorted-ascending > span::before { visibility: visible; } :host.sorted-descending > span::before { visibility: visible; content: ''; } :host.numeric { text-align: right; } /*# sourceMappingURL=md-datatable-column.component.css.map */ "],
    }),
    __param$3(0, _angular_core.Optional()), __param$3(0, _angular_core.Inject(_angular_core.forwardRef(function () { return exports.MdDataTableComponent; }))),
    __metadata$5("design:paramtypes", [exports.MdDataTableComponent,
        MdDatatableStore,
        MdDatatableActions])
], exports.MdDataTableColumnComponent);

var __decorate$8 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$6 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$4 = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
exports.MdDataTableModule = (function () {
    function MdDataTableModule(parentModule) {
        if (parentModule) {
            throw new Error('MdDataTableModule already loaded; Import in root module only.');
        }
    }
    return MdDataTableModule;
}());
exports.MdDataTableModule = __decorate$8([
    _angular_core.NgModule({
        declarations: [
            exports.MdDataTableComponent,
            exports.MdDataTableHeaderComponent,
            exports.MdDataTableColumnComponent,
            exports.MdDataTableRowComponent,
            exports.MdDataTablePaginationComponent,
        ],
        imports: [
            _angular_common.CommonModule,
            _angular_forms.FormsModule,
            _angular_material.MdCheckboxModule,
            _angular_material.MdSelectModule,
            _angular_material.MdButtonModule,
            _angular_material.MdIconModule,
        ],
        providers: [
            { provide: MdDatatableDispatcher, useClass: MdDatatableDispatcher },
            { provide: STORE_INITIAL_STATE, useValue: {} },
            { provide: REDUX_DEVTOOLS_EXTENSION, useFactory: reduxDevToolsExtensionFactory },
            { provide: DatatableReducer, useClass: DatatableReducer },
            { provide: MdDatatableStore, useClass: MdDatatableStore },
            { provide: MdDatatableActions, useClass: MdDatatableActions },
        ],
        exports: [
            exports.MdDataTableComponent,
            exports.MdDataTableHeaderComponent,
            exports.MdDataTableColumnComponent,
            exports.MdDataTableRowComponent,
            exports.MdDataTablePaginationComponent,
        ]
    }),
    __param$4(0, _angular_core.Optional()), __param$4(0, _angular_core.SkipSelf()),
    __metadata$6("design:paramtypes", [exports.MdDataTableModule])
], exports.MdDataTableModule);

Object.defineProperty(exports, '__esModule', { value: true });

})));


//# sourceMappingURL=./ng2-md-datatable.umd.js.map
