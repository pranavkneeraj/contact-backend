import { InjectionToken } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import 'rxjs/add/operator/observeOn';
import 'rxjs/add/operator/withLatestFrom';
import { IDatatablesState, IDatatableAction, IReduxDevToolsExtension } from './md-datatable.interfaces';
import { DatatableReducer } from './md-datatable.reducer';
export declare const STORE_INITIAL_STATE: InjectionToken<IDatatablesState>;
export declare const REDUX_DEVTOOLS_EXTENSION: InjectionToken<IReduxDevToolsExtension>;
export declare function reduxDevToolsExtensionFactory(): IReduxDevToolsExtension | null;
export declare class MdDatatableDispatcher extends BehaviorSubject<IDatatableAction> {
    static INIT: string;
    constructor();
    dispatch(action: IDatatableAction): void;
}
export declare class MdDatatableStore extends Observable<IDatatablesState> {
    private dispatcher$;
    private instanceId;
    private state$;
    constructor(dispatcher$: MdDatatableDispatcher, initialState: IDatatablesState, reducer: DatatableReducer, reduxDevToolsExtension: IReduxDevToolsExtension);
    dispatch(action: IDatatableAction): void;
}
