var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input, Output, EventEmitter, ContentChild, ContentChildren, QueryList, forwardRef, } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/from';
import 'rxjs/add/operator/distinctUntilChanged';
import 'rxjs/add/operator/let';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/skip';
import 'rxjs/add/operator/takeUntil';
import { BaseComponent } from './helpers';
import { MdDataTableHeaderComponent } from './md-datatable-header.component';
import { MdDataTableRowComponent } from './md-datatable-row.component';
import { MdDatatableStore } from './md-datatable.store';
import { MdDatatableActions } from './md-datatable.actions';
import { getCurrentSelection, getCurrentSort } from './md-datatable.reducer';
var instanceId = 0;
var MdDataTableComponent = (function (_super) {
    __extends(MdDataTableComponent, _super);
    function MdDataTableComponent(store, actions) {
        var _this = _super.call(this) || this;
        _this.store = store;
        _this.actions = actions;
        _this.isSelectable = false;
        _this.selectionChange = new EventEmitter(false);
        _this.sortChange = new EventEmitter(false);
        _this.id = "md-datatable-" + instanceId++;
        return _this;
    }
    Object.defineProperty(MdDataTableComponent.prototype, "selectable", {
        set: function (val) {
            if (typeof (val) === 'boolean') {
                this.isSelectable = val;
            }
            else if (typeof (val) === 'string' && val.length > 0) {
                try {
                    this.isSelectable = JSON.parse(val);
                }
                catch (e) {
                    console.error(e);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    MdDataTableComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (this.isSelectable && this.headerCmp && this.rowsCmp) {
            this.store.dispatch(this.actions.updateSelectableValues(this.id, this.rowsCmp.toArray().map(function (row) { return row.selectableValue; })));
            this.store
                .let(getCurrentSelection(this.id))
                .skip(1)
                .takeUntil(this.unmount$)
                .subscribe(this.selectionChange);
            Observable.from(this.rowsCmp.changes)
                .map(function (query) { return query
                .toArray()
                .map(function (row) { return row.selectableValue; }); })
                .distinctUntilChanged(function (values1, values2) {
                return values1.length === values2.length && JSON.stringify(values1) === JSON.stringify(values2);
            })
                .takeUntil(this.unmount$)
                .subscribe(function (selectableValues) { return _this.store.dispatch(_this.actions.updateSelectableValues(_this.id, selectableValues)); });
        }
        this.store
            .let(getCurrentSort(this.id))
            .takeUntil(this.unmount$)
            .subscribe(this.sortChange);
    };
    return MdDataTableComponent;
}(BaseComponent));
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], MdDataTableComponent.prototype, "selectable", null);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], MdDataTableComponent.prototype, "selectionChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], MdDataTableComponent.prototype, "sortChange", void 0);
__decorate([
    ContentChild(forwardRef(function () { return MdDataTableHeaderComponent; })),
    __metadata("design:type", MdDataTableHeaderComponent)
], MdDataTableComponent.prototype, "headerCmp", void 0);
__decorate([
    ContentChildren(MdDataTableRowComponent),
    __metadata("design:type", QueryList)
], MdDataTableComponent.prototype, "rowsCmp", void 0);
MdDataTableComponent = __decorate([
    Component({
        selector: 'ng2-md-datatable',
        template: "\n    <table>\n      <ng-content></ng-content>\n    </table>\n  ",
        styles: [":host { display: block; overflow: auto; } table { width: 100%; border-spacing: 0; border-collapse: collapse; box-sizing: border-box; } /*# sourceMappingURL=md-datatable.component.css.map */ "]
    }),
    __metadata("design:paramtypes", [MdDatatableStore,
        MdDatatableActions])
], MdDataTableComponent);
export { MdDataTableComponent };

//# sourceMappingURL=md-datatable.component.js.map
